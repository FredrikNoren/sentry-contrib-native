(function() {var implementors = {};
implementors["sentry_contrib_native"] = [{"text":"impl From&lt;[u8; 16]&gt; for Uuid","synthetic":false,"types":[]},{"text":"impl From&lt;Uuid&gt; for [u8; 16]","synthetic":false,"types":[]},{"text":"impl From&lt;ParseError&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;()&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;bool&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i8&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;u16&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;i16&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f64&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;f32&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ str&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Into&lt;Value&gt;&gt; From&lt;Vec&lt;V&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Into&lt;String&gt;, V:&nbsp;Into&lt;Value&gt;&gt; From&lt;Vec&lt;(K, V)&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Into&lt;String&gt;, V:&nbsp;Into&lt;Value&gt;&gt; From&lt;BTreeMap&lt;K, V&gt;&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Into&lt;Self&gt; + Copy, '_&gt; From&lt;&amp;'_ V&gt; for Value","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Infallible&gt; for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()