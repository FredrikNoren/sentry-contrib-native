initSidebarItems({"constant":[["API_VERSION","Version of the Sentry API we can communicate with, AFAICT this is just hardcoded into sentry-native, so...two can play at that game!"],["ENVELOPE_MIME","The MIME type for Sentry envelopes."],["SDK_USER_AGENT","SDK Version"]],"enum":[["Error","Sentry errors."],["Shutdown","The return from [`Transport::shutdown`], which determines if we tell the Sentry SDK if we were able to send all requests to the remote service or not in the time allotted."]],"fn":[["free","The function registered with [`sys::transport_set_free_func`] that actually frees our state"],["send","The function registered with [`sys::transport_new`] when the SDK wishes to send an envelope to Sentry"],["shutdown","The function registered with [`sys::transport_set_shutdown_func`] which will attempt to flush all of the outstanding requests via the transport, and shutdown the worker thread, before the specified timeout is reached"],["startup","The function registered with [`sys::transport_set_startup_func`] to start our transport so that we can being sending requests to Sentry"]],"struct":[["Dsn","Contains the pieces we need to send requests based on the DSN the user set on [`Options`]"],["Envelope","The actual body which transports send to Sentry."],["Parts","[`Parts`] aquired from [`Dsn::into_parts`]."],["RawEnvelope","Wrapper for the raw Envelope that we should send to Sentry"]],"trait":[["Transport","Trait used to define your own transport that Sentry can use to send events to a Sentry service."]],"type":[["Request","The request your [`Transport`] is expected to send."]]});