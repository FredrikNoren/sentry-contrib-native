initSidebarItems({"enum":[["Message","Message received for custom logger."]],"fn":[["ffi_before_send","Function to give [`Options::set_before_send`] which in turn calls user defined one."],["ffi_logger","Function to give [`Options::set_logger`] which in turn calls user defined one."],["global_read","Convenience function to get a read lock on `GLOBAL_LOCK`."],["global_write","Convenience function to get a write lock on `GLOBAL_LOCK`."]],"static":[["BEFORE_SEND","Store [`Options::set_before_send`] data to properly allocate later."],["GLOBAL_LOCK","Global lock for the following purposes: - Prevent [`Options::init`] from being called twice. - Fix some use-after-free bugs in `sentry-native` that can happen when   shutdown is called while other functions are still accessing global   options. Hopefully this will be fixed upstream in the future, see   https://github.com/getsentry/sentry-native/issues/280. - `Event::capture` uses mutable global data passed   to [`Options::set_before_send`], which would otherwise need a seperate   [`Mutex`] to do safely."],["LOGGER","Globally stored closure for [`Options::set_logger`]."]],"struct":[["Options","The Sentry client options."],["Shutdown","Automatically shuts down the Sentry client on drop."]],"trait":[["BeforeSend","Trait to help pass data to [`Options::set_before_send`]."]],"type":[["Logger","Closure type for [`Options::set_logger`]."]]});